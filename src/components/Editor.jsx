import { useEditor, EditorContent } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import { useState } from 'react'

// Mapeo de caracteres para formateo
const BOLD_CHARS = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú',
  'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•',
  'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂',
  'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø',
  's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
}

const ITALIC_CHARS = {
  'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 'F': 'ùòç', 'G': 'ùòé', 'H': 'ùòè', 'I': 'ùòê',
  'J': 'ùòë', 'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï', 'O': 'ùòñ', 'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô',
  'S': 'ùòö', 'T': 'ùòõ', 'U': 'ùòú', 'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†', 'Z': 'ùò°',
  'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶', 'f': 'ùòß', 'g': 'ùò®', 'h': 'ùò©', 'i': 'ùò™',
  'j': 'ùò´', 'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ', 'o': 'ùò∞', 'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥',
  's': 'ùò¥', 't': 'ùòµ', 'u': 'ùò∂', 'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫', 'z': 'ùòª'
}

const MenuBar = ({ editor }) => {
  if (!editor) {
    console.log('MenuBar: Editor no inicializado')
    return null
  }

  const handleCommand = (command, name) => {
    console.log(`MenuBar: Ejecutando comando ${name}`)
    if (name === 'bulletList') {
      // Si estamos en una lista, salimos de ella
      if (editor.isActive('bulletList')) {
        console.log('Desactivando lista en la posici√≥n actual')
        editor.chain().focus().toggleBulletList().run()
      } else {
        // Si no estamos en una lista, creamos una nueva en la posici√≥n actual
        console.log('Creando nueva lista en la posici√≥n actual')
        editor
          .chain()
          .focus()
          .insertContent({ type: 'bulletList', content: [{ type: 'listItem', content: [{ type: 'paragraph' }] }] })
          .run()
      }
    } else {
      command()
    }
    console.log(`MenuBar: Estado de ${name}:`, editor.isActive(name))
  }

  return (
    <div className="border-b border-gray-200 p-4 flex gap-2">
      <button
        onClick={() => handleCommand(
          () => editor.chain().focus().toggleBold().run(),
          'bold'
        )}
        className={`px-3 py-1 border rounded ${editor.isActive('bold') ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
        title="Negrita"
      >
        <strong>B</strong>
      </button>
      <button
        onClick={() => handleCommand(
          () => editor.chain().focus().toggleItalic().run(),
          'italic'
        )}
        className={`px-3 py-1 border rounded ${editor.isActive('italic') ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
        title="Cursiva"
      >
        <em>I</em>
      </button>
      <button
        onClick={() => handleCommand(
          () => editor.chain().focus().toggleBulletList().run(),
          'bulletList'
        )}
        className={`px-3 py-1 border rounded ${editor.isActive('bulletList') ? 'bg-gray-200' : 'hover:bg-gray-100'}`}
        title="Lista"
      >
        ‚Ä¢ Lista
      </button>
    </div>
  )
}

const Editor = () => {
  const [copyStatus, setCopyStatus] = useState('')

  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        bulletList: {
          HTMLAttributes: {
            class: 'list-disc ml-4',
          },
          keepMarks: true,
          keepAttributes: true,
        },
      }),
    ],
    content: '<p>¬°Escribe tu post de LinkedIn aqu√≠!</p>',
    editorProps: {
      attributes: {
        class: 'p-4 min-h-[200px] focus:outline-none text-gray-800',
      },
    },
  })

  const formatText = (text, charMap) => {
    return text.split('').map(char => charMap[char] || char).join('')
  }

  const formatForLinkedIn = (node) => {
    if (!node || !node.content) return ''
    
    return node.content.map(item => {
      let text = ''
      
      // Procesar el contenido del nodo
      if (item.content) {
        text = formatForLinkedIn(item)
      } else if (item.text) {
        text = item.text
      }
      
      // Aplicar marcas usando caracteres Unicode espec√≠ficos
      if (item.marks) {
        item.marks.forEach(mark => {
          if (mark.type === 'bold') {
            text = formatText(text, BOLD_CHARS)
          }
          if (mark.type === 'italic') {
            text = formatText(text, ITALIC_CHARS)
          }
        })
      }
      
      // Manejar tipos espec√≠ficos de nodos
      if (item.type === 'bulletList') {
        return text.split('\n').filter(Boolean).map(line => `‚Ä¢ ${line.trim()}`).join('\n')
      }
      if (item.type === 'listItem') {
        return text.trim()
      }
      if (item.type === 'paragraph') {
        return text + (item.type === 'listItem' ? '' : '\n\n')
      }
      
      return text
    }).join('').replace(/\n\n+/g, '\n\n').trim()
  }

  const handleCopy = async () => {
    console.log('Iniciando proceso de copia')
    
    if (!editor) {
      console.error('Editor no disponible para copiar')
      return
    }

    try {
      const json = editor.getJSON()
      console.log('Contenido JSON:', json)
      
      let formattedText = formatForLinkedIn(json)
      console.log('Texto formateado para LinkedIn:', formattedText)

      await navigator.clipboard.writeText(formattedText)
      console.log('Texto copiado al portapapeles exitosamente')
      
      setCopyStatus('¬°Copiado!')
      setTimeout(() => {
        setCopyStatus('')
        console.log('Estado de copia reiniciado')
      }, 2000)
    } catch (err) {
      console.error('Error al copiar:', err)
      setCopyStatus('Error al copiar')
      setTimeout(() => {
        setCopyStatus('')
        console.log('Estado de error reiniciado')
      }, 2000)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white border rounded-lg shadow">
          <MenuBar editor={editor} />
          <EditorContent editor={editor} className="prose max-w-none" />
          <div className="border-t p-4 flex items-center justify-between">
            <button 
              onClick={handleCopy}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Copiar al portapapeles
            </button>
            {copyStatus && (
              <span className="text-green-500">{copyStatus}</span>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default Editor 


